// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  stores            Store[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Store {
  id                String   @id @default(cuid())
  userId            String   
  name              String
  category          String
  description       String
  services          Service[]
  teamMembers       String[]
  address           String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)  

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


model Service {
  id                String   @id @default(cuid())
  storeId           String 
  title             String
  description       String
  duration          Int
  price             Int
  currency          Currency

  store             Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Customer {
  id                Int    @id @default(autoincrement())
  name              String
  email             String @unique
  phoneNumber       String @unique
}

model VerificationToken {
  id                String   @id @default(uuid())
  email             String
  token             String   @unique
  expires           DateTime

  @@index([email])
}

enum Currency {
  DOLLAR
  EURO
  DRAM
  RUBL
}